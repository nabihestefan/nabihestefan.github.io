[{"categories":null,"contents":"Chess has simple rules, but the game space is extremely large. With the strength of our current computers, we aren\u0026rsquo;t even close to solving the game of chess by brute force. As a fallback, engines use a heuristic to try to find the best moves for a given player, which basically traverses a \u0026ldquo;game tree\u0026rdquo; (tree of possible moves for both players) and quantitatively evaluates the resulting position. This project primarily focuses on how to efficiently traverse such a game tree and create an effective heuristic to maximize the strength of a chess engine. With my partner Andrew Mascillaro, we created a custom chess engine. To test the engine\u0026rsquo;s strength, we have scripts that allow the engine to play agains humans or Stockfish (a top open source chess engine) at different rating levels. Our engine outperformed our expectations, and has won games against the 2400 rated Stockfish engine, which basically means this engine is strong enough to be a titled player in the chess world.\n","permalink":"https://estefan.co/projects/creations/checkmatr/","tags":["Python","Minimax","Tree Traversal","AlphaBeta Pruning","Heuristic Evaluation"],"title":"Checkmatr: A Custom Chess Engine"},{"categories":null,"contents":"For the final Fundamentals of Robotics project, our team (Isabella Abilheira, Chris Allum, Olivia Jo Bradley, Oscar De La Garza,Nabih Estefan, Maya Sivanandan) was tasked with creating a rover that could complete several missions in The O, the center courtyard of Olin’s campus. The three main challenges were: Navigation of unobstructed terrain, Docking in a supply station, and Delivering a payload to a drop box. Besides this, our team decided to try and do 3 extra stretch goals: Navigate through stationary obstacles, park within the medium box of the supply station, and deliver our payload to a specific dropbox using April tags (with a possible one being finding payloads around the O and picking those up for extra deliveries). Of these, we were able to complete the first two during our demo, with the two payload stretch goals not being tried since the payload rules we’re re-instated halfway through the development of the project, and stretching ourselves to complete these seemed unnecessary.\n","permalink":"https://estefan.co/projects/creations/furbyrover/","tags":["Raspberry Pi","MATLAB","Robotics","Rover","Autonomous"],"title":"Olin Planetary Rover"},{"categories":null,"contents":"For our first project in our Software Systems class, me and my partner (Oscar De La Garza) developed a set of executable c files that can be used to set up a server for two clients to play chess. The server is run from the terminal of one computer and the two clients can connect by running the client script. These clients then take turns playing a chess game, which is all taken care of by the server. The only restriction to the game is that the clients and server have to be on the same Wi-Fi, and the clients need to know the server\u0026rsquo;s IP address, if these are met, the connection between the server and the clients will work as expected.\n","permalink":"https://estefan.co/projects/creations/terminalchess/","tags":["C","Networking","Server Client","Socket Programming"],"title":"Terminal Chess"},{"categories":null,"contents":"For the final project of Engineering Systems Analysis (ESA) I programmed (with Olivia Jo Bradley) a Balboa U324 robot (which we called Rocky) to self-balance. This project was centered mostly around the logic and calculations behind transfer functions, and how these can be used for feedback loops with PI control, simulating the robot as an inverted pendulum, and having Rocky react to changes in its position to stabilize.\n","permalink":"https://estefan.co/projects/creations/rockyrobot/","tags":["Transfer Functions","Laplace Transforms","Feedback Loops","PI Control","Arduino"],"title":"Self-Balancing Rocky Robot"},{"categories":null,"contents":"Throughout the semester in out Computer Architecture class, we learned how different logic gates are used to create different components of a CPU, eventually leading up to us building a full Single-Cycle CPU (which you can see in another project). For our final project, Oscar De La Garza and I decided to recreate one of these very important components from a CPU in a different platform than the ones we had used previously: Minecraft. To see the details of how this 8-bit ALU in Minecraft works, and what steps we did to build, test, and compare it for effectiveness, you can go to the Project Website.\n","permalink":"https://estefan.co/projects/creations/minecraftalu/","tags":["Computer Architecture","Verilog","Minecraft","Logic Gates"],"title":"CPU Components in Minecraft: 8-bit ALU"},{"categories":null,"contents":"Elliptic Curve Cryptography is one of the most common forms of cryptography used in messaging services and different internet transactions and information exchanges. For our final project in Discrete Math, Jack Greenberg, Oscar De La Garza, and I decided that we were going to create a webpage with a set of slides that helps people understand the basic of what ECC is, how, and why it works. The website can be seen in the link below.\n","permalink":"https://estefan.co/projects/creations/ellipticcurvecryptography/","tags":["Discrete Math","Cryptography","Elliptic Curves","Modular Arithmetic"],"title":"Elliptic Curve Cryptography"},{"categories":null,"contents":"Above you can see a perfect pancake flip. At the end of our QEA II class, my project, with Olivia Jo Bradley, was centered around measuring the accelerations and orientations of the pan so that we can compare these (and the frequencies of the accelerations) to a perfect pancake flip, and create animations like the one below. If you want to know how we go from the gif above and the data collected from that movement to the animation below go to our project website.\n","permalink":"https://estefan.co/projects/creations/pancakeflipper/","tags":["MatLab","Sensing","Art Design","Frequency Analysis"],"title":"The Perfect Pancake Flip Trainer"},{"categories":null,"contents":"Throughout the semester of Computer Architecture we started with Binary logic and built our knowledge up all the way to how different components of a CPU are built from logic gates. This last Lab was centered around me and Oscar De La Garza creating a Single Cycle CPU in Verilog. We built the CPU with branches, jumps, loads, stores, and so many other functions for our ALU.\n","permalink":"https://estefan.co/projects/creations/singlecyclecpu/","tags":["Computer Architecture","Verilog","Logic Gates"],"title":"Single Cycle CPU in Verilog"},{"categories":null,"contents":"For the final project for our Software Design class, Oscar De La Garza and I decided to create an Adventure Game in the style of the original The Legend Of Zelda. We created this game using Python\u0026rsquo;s PyGame library, developing different enemies, characters, screens, and mechanics that are used on different goals throughout the game. You can see in more detail the Sprites and mechanics we developed for Medieval Quest in our project webpage below.\n","permalink":"https://estefan.co/projects/creations/medievalquest/","tags":["Python","PyGame","Art Design"],"title":"Medieval Quest: An Adventure Game"},{"categories":null,"contents":" Olivia Jo Bradley, Maya Sivanandan, Florian Schwarzinger, and I participated in the MakeHarvard 2020 Make-a-thon. We decided to create, in our 24 hours, an automatic 2x2x2 Rubiks Cube solver. The difference between this and a normal Rubik\u0026rsquo;s cube solver is the fact that a 2x2x2 Rubik\u0026rsquo;s cube cant be held by the center pieces to turn the sides of the cube the way normal cubes are held, meaning it has to be free to twist and turn during it being solved. We designed the structure during the start of our Make-a-thon and while Olivia Jo and Maya built it, I created the code that told our machine (which we called Dum-E as a callback to Iron Man) how to scan the cube and create a string that represents its state. Then, this string would be sent to a script that Florian created, which will return another string that signifies the set of steps needed to solve it, which my code would decode and tell Dum-E how to perform.\n","permalink":"https://estefan.co/projects/creations/dum-e/","tags":["Arduino","Python","MakeHarvard","MakeHarvard Original","Make-a-thon"],"title":"Dum-E: a 2x2x2 Rubik's Cube Solver"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026rdquo; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026rdquo; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://estefan.co/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://estefan.co/search/","tags":null,"title":"Search Results"}]