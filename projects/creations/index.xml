<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creations on Nabih Estefan Diaz</title>
    <link>https://estefan.co/projects/creations/</link>
    <description>Recent content in Creations on Nabih Estefan Diaz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2020 15:00:28 +0000</lastBuildDate>
    
	<atom:link href="https://estefan.co/projects/creations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Checkmatr: A Custom Chess Engine</title>
      <link>https://estefan.co/projects/creations/checkmatr/</link>
      <pubDate>Sun, 16 May 2021 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/checkmatr/</guid>
      <description>Chess has simple rules, but the game space is extremely large. With the strength of our current computers, we aren&amp;rsquo;t even close to solving the game of chess by brute force. As a fallback, engines use a heuristic to try to find the best moves for a given player, which basically traverses a &amp;ldquo;game tree&amp;rdquo; (tree of possible moves for both players) and quantitatively evaluates the resulting position. This project primarily focuses on how to efficiently traverse such a game tree and create an effective heuristic to maximize the strength of a chess engine.</description>
    </item>
    
    <item>
      <title>Olin Planetary Rover</title>
      <link>https://estefan.co/projects/creations/furbyrover/</link>
      <pubDate>Wed, 12 May 2021 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/furbyrover/</guid>
      <description>For the final Fundamentals of Robotics project, our team (Isabella Abilheira, Chris Allum, Olivia Jo Bradley, Oscar De La Garza,Nabih Estefan, Maya Sivanandan) was tasked with creating a rover that could complete several missions in The O, the center courtyard of Olinâ€™s campus. The three main challenges were: Navigation of unobstructed terrain, Docking in a supply station, and Delivering a payload to a drop box. Besides this, our team decided to try and do 3 extra stretch goals: Navigate through stationary obstacles, park within the medium box of the supply station, and deliver our payload to a specific dropbox using April tags (with a possible one being finding payloads around the O and picking those up for extra deliveries).</description>
    </item>
    
    <item>
      <title>Terminal Chess</title>
      <link>https://estefan.co/projects/creations/terminalchess/</link>
      <pubDate>Mon, 05 Apr 2021 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/terminalchess/</guid>
      <description>For our first project in our Software Systems class, me and my partner (Oscar De La Garza) developed a set of executable c files that can be used to set up a server for two clients to play chess. The server is run from the terminal of one computer and the two clients can connect by running the client script. These clients then take turns playing a chess game, which is all taken care of by the server.</description>
    </item>
    
    <item>
      <title>Self-Balancing Rocky Robot</title>
      <link>https://estefan.co/projects/creations/rockyrobot/</link>
      <pubDate>Mon, 01 Mar 2021 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/rockyrobot/</guid>
      <description>For the final project of Engineering Systems Analysis (ESA) I programmed (with Olivia Jo Bradley) a Balboa U324 robot (which we called Rocky) to self-balance. This project was centered mostly around the logic and calculations behind transfer functions, and how these can be used for feedback loops with PI control, simulating the robot as an inverted pendulum, and having Rocky react to changes in its position to stabilize.</description>
    </item>
    
    <item>
      <title>CPU Components in Minecraft: 8-bit ALU</title>
      <link>https://estefan.co/projects/creations/minecraftalu/</link>
      <pubDate>Fri, 11 Dec 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/minecraftalu/</guid>
      <description>Throughout the semester in out Computer Architecture class, we learned how different logic gates are used to create different components of a CPU, eventually leading up to us building a full Single-Cycle CPU (which you can see in another project). For our final project, Oscar De La Garza and I decided to recreate one of these very important components from a CPU in a different platform than the ones we had used previously: Minecraft.</description>
    </item>
    
    <item>
      <title>Elliptic Curve Cryptography</title>
      <link>https://estefan.co/projects/creations/ellipticcurvecryptography/</link>
      <pubDate>Fri, 11 Dec 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/ellipticcurvecryptography/</guid>
      <description>Elliptic Curve Cryptography is one of the most common forms of cryptography used in messaging services and different internet transactions and information exchanges. For our final project in Discrete Math, Jack Greenberg, Oscar De La Garza, and I decided that we were going to create a webpage with a set of slides that helps people understand the basic of what ECC is, how, and why it works. The website can be seen in the link below.</description>
    </item>
    
    <item>
      <title>The Perfect Pancake Flip Trainer</title>
      <link>https://estefan.co/projects/creations/pancakeflipper/</link>
      <pubDate>Fri, 11 Dec 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/pancakeflipper/</guid>
      <description>Above you can see a perfect pancake flip. At the end of our QEA II class, my project, with Olivia Jo Bradley, was centered around measuring the accelerations and orientations of the pan so that we can compare these (and the frequencies of the accelerations) to a perfect pancake flip, and create animations like the one below. If you want to know how we go from the gif above and the data collected from that movement to the animation below go to our project website.</description>
    </item>
    
    <item>
      <title>Single Cycle CPU in Verilog</title>
      <link>https://estefan.co/projects/creations/singlecyclecpu/</link>
      <pubDate>Sun, 11 Oct 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/singlecyclecpu/</guid>
      <description>Throughout the semester of Computer Architecture we started with Binary logic and built our knowledge up all the way to how different components of a CPU are built from logic gates. This last Lab was centered around me and Oscar De La Garza creating a Single Cycle CPU in Verilog. We built the CPU with branches, jumps, loads, stores, and so many other functions for our ALU.</description>
    </item>
    
    <item>
      <title>Medieval Quest: An Adventure Game</title>
      <link>https://estefan.co/projects/creations/medievalquest/</link>
      <pubDate>Mon, 11 May 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/medievalquest/</guid>
      <description>For the final project for our Software Design class, Oscar De La Garza and I decided to create an Adventure Game in the style of the original The Legend Of Zelda. We created this game using Python&amp;rsquo;s PyGame library, developing different enemies, characters, screens, and mechanics that are used on different goals throughout the game. You can see in more detail the Sprites and mechanics we developed for Medieval Quest in our project webpage below.</description>
    </item>
    
    <item>
      <title>Dum-E: a 2x2x2 Rubik&#39;s Cube Solver</title>
      <link>https://estefan.co/projects/creations/dum-e/</link>
      <pubDate>Tue, 11 Feb 2020 12:00:00 -0500</pubDate>
      
      <guid>https://estefan.co/projects/creations/dum-e/</guid>
      <description>Olivia Jo Bradley, Maya Sivanandan, Florian Schwarzinger, and I participated in the MakeHarvard 2020 Make-a-thon. We decided to create, in our 24 hours, an automatic 2x2x2 Rubiks Cube solver. The difference between this and a normal Rubik&amp;rsquo;s cube solver is the fact that a 2x2x2 Rubik&amp;rsquo;s cube cant be held by the center pieces to turn the sides of the cube the way normal cubes are held, meaning it has to be free to twist and turn during it being solved.</description>
    </item>
    
  </channel>
</rss>